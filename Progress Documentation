
TO DO:

config the file structure of Quiz-app to be compatible with my Json file Instructions : https://www.notion.so/Student-Dashboard-0d146476480a41569a8a82ca78a75562?p=5286ff8de3f84934be39cbba17237a22&pm=s

### **1. Should you have `index.html`, `style.css`, and `script.js` for each quiz?**

It’s unnecessary to duplicate these files for each quiz unless the quizzes require unique layouts, styles, or scripts. Instead, you can:

- Use **one global template** for the layout (e.g., a shared `index.html`) and dynamically load quiz data from JSON.
- Use a **shared stylesheet (`style.css`)** for consistent styling across all quizzes.
- Use a **single JavaScript file (`script.js`)** to dynamically load and display quiz questions/answers from JSON files.

---

### **2. Suggested File Structure**

Here’s how you can reorganize the file structure for better compatibility and easier maintenance:

```graphql
graphql
Kopiera kod
quiz-app/
├── README.md              # Main guide to navigating and using the quizzes
├── LICENSE.md             # License file for the repository
├── assets/                # Shared assets for all quizzes
│   ├── style.css          # Shared styles for all quizzes
│   ├── script.js          # Shared script for loading quiz data dynamically
│   └── logo.png           # Any shared images or logos
├── index.html             # Main landing page for the quiz app
├── quizzes/               # Folder for all quizzes
│   ├── quiz-01.json       # JSON file with data for Quiz 1
│   ├── quiz-02.json       # JSON file with data for Quiz 2
│   └── ...                # More quiz JSON files
└── templates/             # Optional: Shared HTML templates
    └── quiz-template.html # Template for rendering quizzes

```

---

### **3. Writing Quiz Data**

Store all quiz-specific data (questions, answers, options, and metadata) in a **JSON file**. This ensures:

- Data is decoupled from presentation.
- The app can dynamically generate quizzes using the same layout.

Example JSON format for a quiz (`quiz-01.json`):

```json
json
Kopiera kod
{
  "title": "Network Basics Quiz",
  "questions": [
    {
      "question": "What is the default port for HTTP?",
      "options": ["80", "443", "22", "21"],
      "correctAnswer": 0
    },
    {
      "question": "Which layer of the OSI model is responsible for routing?",
      "options": ["Application", "Network", "Transport", "Session"],
      "correctAnswer": 1
    }
  ]
}

```

---

### **4. How to Display JSON Data Dynamically**

Use a shared `script.js` to fetch and display the quiz data dynamically. Example:

```jsx
javascript
Kopiera kod
// script.js

document.addEventListener('DOMContentLoaded', () => {
    const quizId = new URLSearchParams(window.location.search).get('quiz'); // Get quiz ID from URL
    const quizContainer = document.getElementById('quiz-container');

    fetch(`quizzes/${quizId}.json`)
        .then(response => response.json())
        .then(data => {
            displayQuiz(data, quizContainer);
        })
        .catch(error => console.error('Error loading quiz:', error));
});

function displayQuiz(data, container) {
    container.innerHTML = `<h1>${data.title}</h1>`;
    data.questions.forEach((q, index) => {
        container.innerHTML += `
            <div class="question">
                <p>${index + 1}. ${q.question}</p>
                ${q.options
                    .map((option, i) => `<button onclick="checkAnswer(${index}, ${i})">${option}</button>`)
                    .join('')}
            </div>
        `;
    });
}

function checkAnswer(questionIndex, optionIndex) {
    // Logic to validate the answer
    console.log(`Question ${questionIndex + 1}, Option ${optionIndex + 1} clicked`);
}

```

---

### **5. Advantages of the New Format**

- **Maintainability**: Changes to styles or scripts only need to be done once.
- **Scalability**: You can easily add more quizzes by creating new JSON files.
- **Separation of Concerns**: Data (JSON) is kept separate from layout (HTML) and behavior (JavaScript).

---

### **6. Testing JSON Compatibility**

To ensure your JSON files are compatible:

1. **Validate JSON**: Use online tools like [JSONLint](https://jsonlint.com/) to check for syntax errors.
2. **Test Loading**: Create a test function in your JavaScript to ensure each quiz JSON file loads correctly.
3. **Dynamic Rendering**: Use the shared layout (`index.html`) to dynamically load and display data from any JSON file.

---

### **Final Steps**

- Update your repository structure.
- Convert existing quizzes into JSON files.
- Implement a shared layout (`index.html`) that dynamically renders quizzes.
- Test thoroughly to ensure compatibility and a smooth user experience.


































------------------------------------------------------------------------------------------------------------------- TO DO:


---------- TROUBLESHOOOT: index.Html and Json file= config.yml
1.   Seting  up navigation links to your pages or quizzes (you can add more links later).
navigation:
  - title: "Home"
    url: "https://github.com/TechnicalMindset/Quiz-app"
  - title: "Networking"
    url: "https://github.com/TechnicalMindset/Quiz-app/tree/main/Network"
  - title: "About"
    url: "/about"

----- How to? :  If you find
# yourself editing this file very often, consider using Jekyll's data files
# feature for the data you need to update frequently.

